{
  "name": "voxel-debris",
  "version": "0.0.4",
  "description": "create and collect voxel debris from exploded voxels",
  "main": "index.js",
  "dependencies": {
    "funstance": "~0.0.2"
  },
  "devDependencies": {
    "browserify": "~1.17.1",
    "voxel-engine": "~0.1.9"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/voxel-debris.git"
  },
  "homepage": "https://github.com/substack/voxel-debris",
  "keywords": [
    "voxel",
    "game",
    "terrain",
    "explode"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# voxel-debris\n\ncreate and collect voxel debris from exploded voxels\n\n# example\n\n[View this example.](http://substack.net/projects/voxel-debris/).\n\n``` js\nvar createEngine = require('voxel-engine')\nvar game = createEngine({\n    generate: function(x, y, z) {\n        if (x*x + y*y + z*z > 20*20) return 0;\n        return Math.floor(Math.random() * 4) + 1;\n    },\n    texturePath: './',\n    materials: [ 'dirt', 'grass', 'crate', 'brick' ]\n});\ngame.appendTo('#container');\n\nvar explode = require('voxel-debris')(game, { power : 1.5 });\n\nexplode.on('collect', function (item) {\n    console.log(game.materials[item.value - 1]);\n});\n\ngame.on('mousedown', function (pos) {\n    if (erase) explode(pos)\n    else game.createBlock(pos, 1)\n});\n\nwindow.addEventListener('keydown', ctrlToggle);\nwindow.addEventListener('keyup', ctrlToggle);\n\nvar erase = true\nfunction ctrlToggle (ev) { erase = !ev.ctrlKey }\ngame.requestPointerLock('canvas');\n```\n\n# methods\n\n``` js\nvar voxelDebris = require('voxel-debris')\n```\n\n## var explode = voxelDebris(game, opts)\n\nCreate an explosion function from a\n[voxel-engine](http://npmjs.org/packages/voxel-engine)\ninstance and some options.\n\nIf `opts.limit(item)` is specified, when it returns true, `item` will not be\ncollected by the player when they pass within the collision radius.\n\nIf `opts.yield(value)` is specified, its return value will be how many debris\nitems are created for the voxel data `value`. `opts.yield` can be a function or\njust a number.\n\n`opts.expire.start` and `opts.expire.end` control how long debris should persist\nin the game world in milliseconds. A timeout will be chosen uniformly randomly\nbetween start and end.\nWhen `opts.expire` is a number, its value will be used for both start and end.\n\n`opts.power` influcences the velocity of the debris. Default value: 1.\n\n## explode(pos)\n\nExplode the block at the THREE.Vector3 position `pos` if the data at `pos` is\nnon-zero.\n\n# events\n\n## explode.on('collect', function (item) {})\n\nWhen a debris item passes within the collision radius, the `'collect'` event\nfires with the item object before being removed from the scene.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install voxel-debris\n```\n\nThen use [browserify](http://browserify.org) to `require('voxel-debris')`.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/voxel-debris/issues"
  },
  "_id": "voxel-debris@0.0.4",
  "dist": {
    "shasum": "046cae01d038a93017b15d6660b1e66a1dfb239a"
  },
  "_from": "voxel-debris@0.0.4",
  "_resolved": "https://registry.npmjs.org/voxel-debris/-/voxel-debris-0.0.4.tgz"
}
