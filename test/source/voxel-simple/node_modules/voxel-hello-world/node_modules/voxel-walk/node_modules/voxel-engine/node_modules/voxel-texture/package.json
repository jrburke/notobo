{
  "name": "voxel-texture",
  "description": "A texture helper for voxeljs",
  "version": "0.3.0",
  "homepage": "https://github.com/shama/voxel-texture",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shama/voxel-texture.git"
  },
  "bugs": {
    "url": "https://github.com/shama/voxel-texture/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shama/voxel-texture/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "start": "echo \"open localhost:8080/\" && cd example && ../node_modules/.bin/browservefy world.js 8080 -- -d",
    "gh-pages": "cp -R ./example/* ./ && browserify world.js -o world.js"
  },
  "dependencies": {
    "three": "0.54.0",
    "opaque": "0.0.1"
  },
  "devDependencies": {
    "voxel-engine": "~0.4.3",
    "voxel-debris": "~0.0.4",
    "browservefy": "0.0.0"
  },
  "keywords": [
    "voxel",
    "texture"
  ],
  "readme": "# voxel-texture\n\n> A texture helper for [voxeljs](http://voxeljs.com).\n\nView [the demo](http://shama.github.com/voxel-texture).\n\n## example\n\n```js\n// create a material engine\nvar materialEngine = require('voxel-texture')({texturePath: '/textures/'});\n\n// load textures and it returns materials\nvar materials = materialEngine.load(['grass', 'dirt', 'grass_dirt']);\n\n// use the materials to create a grass block\nvar cube = new game.THREE.Mesh(\n  new game.THREE.CubeGeometry(game.cubeSize, game.cubeSize, game.cubeSize),\n  new game.THREE.MeshFaceMaterial(materials)\n);\n```\n\nLoaded materials can also be retrieved later using `get`:\n\n```js\nmaterialEngine.load([\n  'obsidian',\n  ['grass', 'dirt', 'grass_dirt'],\n  'brick'\n]);\n\nvar brick = new game.THREE.Mesh(\n  new game.THREE.CubeGeometry(game.cubeSize, game.cubeSize, game.cubeSize),\n  // find by the name\n  new game.THREE.MeshFaceMaterial(materialEngine.get('brick'))\n);\n\nvar grassBlock = new game.THREE.Mesh(\n  new game.THREE.CubeGeometry(game.cubeSize, game.cubeSize, game.cubeSize),\n  // or by the index\n  new game.THREE.MeshFaceMaterial(materialEngine.get(1))\n);\n```\n\n`materialEngine.load()` can be called mulitple times and the `materialIndex`\nwill just keep on incrementing.\n\nTo access the raw list of materials:\n\n```js\nvar allLoadedMaterials = materialEngine.materials;\n```\n\n## api\n\n### require('voxel-texture')(options)\nReturns a new material engine instance. `options` defaults to:\n\n```js\n{\n  THREE: require('three'),\n  materials: [],\n  texturePath: '/textures/',\n  materialParams: { ambient: 0xbbbbbb },\n  materialType: THREE.MeshLambertMaterial,\n  materialIndex: [],\n  applyTextureParams: function(map) {\n    map.magFilter = this.THREE.NearestFilter;\n    map.minFilter = this.THREE.LinearMipMapLinearFilter;\n    map.wrapT     = this.THREE.RepeatWrapping;\n    map.wrapS     = this.THREE.RepeatWrapping;\n  }\n}\n```\n\n### materialEngine.load(textures, options)\nLoads textures into materials. Will generate materials in various ways depending\nhow textures are feed into `load`:\n\n```js\nvar materials = materialEngine.load('grass');\n// equals [grass, grass, grass, grass, grass, grass]\n```\n\n```js\nvar materials = materialEngine.load(['grass', 'dirt', 'grass_dirt']);\n// equals [grass_dirt, grass_dirt, grass, dirt, grass_dirt, grass_dirt]\n```\n\n```js\nvar materials = materialEngine.load([\n  'obsidian',\n  ['back', 'front', 'top', 'bottom', 'left', 'right'],\n  'brick'\n]);\n/*\nequals [\n  obsidian, obsidian, obsidian, obsidian, obsidian, obsidian,\n  back, front, top, bottom, left, right,\n  brick, brick, brick, brick, brick, brick\n]\n*/\n```\n\nIf you've already created a texture, you can mix those in as well. Such as with\ncreating a canvas texture:\n\n```js\nvar canvas = document.createElement('canvas');\n// ... do your canvas drawing here ...\nvar texture = new game.THREE.Texture(canvas);\n\n// load into the material engine\nmaterialEngine.load(texture);\n```\n\n#### alternate file extension\nIf your texture isn't a `.png`, just specify the extension:\n\n```js\nvar materials = materialEngine.load([\n  'diamond',\n  'crate.gif',\n]);\n```\n\n### materialEngine.get(index)\nRetrieves previously loaded textures. `index` refers to the index of the texture\ngroup loaded, for instance:\n\n```js\nmaterialEngine.load([\n  'obsidian',\n  ['grass', 'dirt', 'grass_dirt'],\n  'brick'\n]);\n\nvar materials = materialEngine.get(1);\n// equals [grass_dirt, grass_dirt, grass, dirt, grass_dirt, grass_dirt]\n\nvar materials = materialEngine.get(2);\n// equals [brick, brick, brick, brick, brick, brick]\n```\n\nYou can also use the texture name. It will match the first texture within a\ngroup and return that group:\n\n```js\nvar materials = materialEngine.get('dirt');\n// equals [grass_dirt, grass_dirt, grass, dirt, grass_dirt, grass_dirt]\n```\n\n### materialEngine.paint(geometry)\nApplies materials to geometries based on their vertex colors. This is what\n`voxel-engine` uses to paint materials onto voxel meshes:\n\n```js\n// create a custom mesh and load all materials\nvar geom = new game.THREE.Geometry();\nvar mesh = new game.THREE.Mesh(\n  geom,\n  new game.THREE.MeshFaceMaterial(materialEngine.get())\n);\n\n// paint the geometry\nmaterialEngine.paint(geom);\n```\n\n### materialEngine.sprite(name, w, h, cb)\nCreate textures from a sprite map. If you have a single image with a bunch of\ntextures do:\n\n```js\n// load terrain.png, it is 512x512\n// each texture is 32x32\nmaterialEngine.sprite('terrain', 32, function(err, textures) {\n  // load textures into the material engine\n  var materials = materialEngine.load(textures);\n\n  // each material will be named: terrain_x_y\n});\n```\n\nIt is async because the image must be loaded before we can chop it up. The width\nand height default to `16x16`.\n\n### transparent\nIf you don't specify the `transparent` option then the transparency will\nautomatically detected with each texture then either turned on or off.\n\n## install\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install voxel-texture\n```\n\n## release history\n* 0.3.0 - refactored entire module. removed rotate. added load, get, paint, sprite methods. auto detect transparent.\n* 0.2.2 - ability to set material type and params. thanks @hughsk!\n* 0.2.1 - fix rotation of front and left textures when loading mesh\n* 0.2.0 - ability to set multiple textures on voxel meshes\n* 0.1.1 - fix texture sharpness\n* 0.1.0 - initial release\n\n## license\nCopyright (c) 2013 Kyle Robinson Young  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "voxel-texture@0.3.0",
  "dist": {
    "shasum": "cfec6ebb201ed017d456ca080805f1e5796e7ce9"
  },
  "_from": "voxel-texture@0.3.0",
  "_resolved": "https://registry.npmjs.org/voxel-texture/-/voxel-texture-0.3.0.tgz"
}
