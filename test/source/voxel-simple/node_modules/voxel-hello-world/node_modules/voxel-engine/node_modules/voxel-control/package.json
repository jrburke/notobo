{
  "name": "voxel-control",
  "version": "0.0.7",
  "description": "manipulate voxel-physical objects in a fps-style fashion",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/voxel-control.git"
  },
  "keywords": [
    "voxeljs",
    "controls"
  ],
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# voxel-control\n\nmanipulate [voxel-physical objects](https://github.com/chrisdickinson/voxel-physical) using\na state object. implements basic FPS controls. is a `through` stream of sorts -- it relies\non voxel-engine to call `control.tick(dt)` to start producing events. it will buffer events\nwhen paused.\n\n### options\n\n```javascript\n// default values are in terms of 1 voxel width\n{ speed: Number(0.0032)           // starting speed\n, maxSpeed: Number(0.0112)        // max speed\n, jumpMaxSpeed: Number(0.016)     // max jump speed\n, jumpMaxTimer: Number(200)     // maximum amount of time jump will be applied in MS\n, jumpSpeed: Number(0.004)        // starting jump speed\n, accelTimer: Number(200)       // time to reach full speed on X/Y\n, accelerationCurve: Function() // function(current, max) -> [0-1]\n                                // defaults to a sin curve.\n, airControl: Boolean(true)     // can player control direction without being on the ground?\n, fireRate: Number(0)           // MS between firing\n, discreteFire: Boolean(false)  // does firing require mousedown -> mouseup, or can it be held?\n, onfire: Function()            // function(state) -> undefined\n, rotationXMax: Number(33)              // maximum x rotation in a tick\n, rotationYMax: Number(33)              // maximum y rotation in a tick\n, rotationZMax: Number(33)              // maximum z rotation in a tick\n, rotationMax: Number(33)               // maximum rotation in a tick -- other \n                                        // rotation maximums fallback to this value\n, rotationXClamp: Number(Math.PI / 2)   // clamp x rotation to +/- this value\n, rotationYClamp: Number(Infinity)      // clamp y rotation to this value\n, rotationZClamp: Number(0)             // clamp z rotation to this value\n, rotationScale: Number(0.002) }        // constant scale of rotation events, applied during tick\n```\n\n### api\n\n#### control(state, opts) -> Control\n\n`state` is a state object (probably supplied by [kb-controls](https://github.com/chrisdickinson/kb-controls.git)).\n\n`opts` is an object optionally containing any of the above. \n\n#### Control#target(target?) -> target\n\n`target` is the object to be manipulated. Assumed to have `.acceleration`, `.velocity`, and `.atRestY() -> -1, 0, 1`.\n\nif a target is passed, set control to target that argument.\n\nreturn the current target.\n\n#### Control#tick(dt) -> undefined\n\nadvance the simulation. if there are any listeners for `'data'`, it will either buffer or emit a data event containing the control state at this tick.\n\n### interactStream.pipe(controls) -> controls\n\n[the interact module](https://github.com/chrisdickinson/interact) emits dx/dy/dz modifications from mouse movements / pointer lock; it can be piped to this stream.\n\n# license\n\nMIT\n",
  "bugs": {
    "url": "https://github.com/chrisdickinson/voxel-control/issues"
  },
  "_id": "voxel-control@0.0.7",
  "dist": {
    "shasum": "9484e5194aa03f16939e1971847cad04e56e47fb"
  },
  "_from": "voxel-control@0.0.7",
  "_resolved": "https://registry.npmjs.org/voxel-control/-/voxel-control-0.0.7.tgz"
}
