{
  "name": "ever",
  "version": "0.0.3",
  "description": "dom events with a node-style EventEmitter api",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/ever.git"
  },
  "homepage": "https://github.com/substack/ever",
  "keywords": [
    "events",
    "dom",
    "browser",
    "browserify",
    "emitter"
  ],
  "devDependencies": {
    "tape": "~0.1.5"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie8",
      "ie9",
      "chrome/10",
      "chrome/20",
      "firefox/5",
      "firefox/15",
      "safari/5.1",
      "opera/12"
    ]
  },
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# ever\n\n[dom events](http://www.w3.org/TR/DOM-Level-2-Events/events.html)\nwith a node-style\n[EventEmitter](http://nodejs.org/docs/latest/api/events.html#events_class_events_eventemitter)\napi\n\n[![browser support](http://ci.testling.com/substack/ever.png)](http://ci.testling.com/substack/ever)\n\n# example\n\n[view the demo](http://substack.net/projects/ever-example/)\n\n``` js\nvar ever = require('ever');\nvar box = document.querySelector('#box');\n\nvar state = false;\never(box).on('click', function (ev) {\n    ev.stopPropagation();\n    state = !state;\n    box.style['background-color'] = state ? 'red' : 'rgb(127,127,127)';\n});\n\nsetInterval(function () {\n    ever(box).emit('click');\n}, 3000);\n```\n\n# methods\n\n``` js\nvar ever = require('ever')\n```\n\n## var ev = ever(element)\n\nReturn a new\n[EventEmitter](http://nodejs.org/docs/latest/api/events.html#events_class_events_eventemitter)\nthat wraps the HTML node `element`.\n\nAll the usual\n[EventEmitter](http://nodejs.org/docs/latest/api/events.html#events_class_events_eventemitter)\nmethods should work with the caveat that adding and removing listeners are\nproxied through to the underlying dom methods, which only expect a single event\nobject as a parameter.\n\n## ev.emit(name, opts)\n\nEmit an event `name` with options `opts`. This method creates a synthetic event\nusing `document.createEvent()` and the corresponding variant of `.initEvent()`\nthat works with the event `name` provided.\n\nThe options `opts` will be passed into the matching `.initEvent()` function\nsignature. Any additional properties will be added to the event object as\nproperties being calling `.dispatchEvent()`.\n\nThe signatures are documented in the file `init.json` in this distribution.\nTo see which event name maps to which init signature, see the `types.json` file.\n\n## ev.on(name, cb), ev.addListener(name, cb)\n\nJust like node's `EventEmitter.prototype.on()`, listen for events.\n\nInternally this calls `.addEventListener()`.\n\n## ev.removeListener(name, cb)\n\nJust like node's `EventEmitter.prototype.removeListener()`, remove a listener.\n\nInternally this calls `.removeEventListener()`, however there is no way to\nobtain a list of all listeners from dom nodes, so only listeners registered by\nthe current `ever()` instance can be removed.\n\n## ev.removeAllListeners(name)\n\nJust like node `EventEmitter.prototype.removeAllListeners()`, remove all the\nlisteners with `name` or everything is `name` is falsy.\n\nUnlike in node, this function calls `removeListener()` on each of the events to\nremove them so that the underlying `.removeEventListener()` calls get fired.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install ever\n```\n\nThis module is meant for use in browsers with a node-style module system.\nUse [browserify](http://github.com/substack/node-browserify) or similar.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/ever/issues"
  },
  "_id": "ever@0.0.3",
  "dist": {
    "shasum": "7e67c3c2b953867ac9c42dcc11f74d688198a800"
  },
  "_from": "ever@X.X.X",
  "_resolved": "https://registry.npmjs.org/ever/-/ever-0.0.3.tgz",
  "scripts": {}
}
