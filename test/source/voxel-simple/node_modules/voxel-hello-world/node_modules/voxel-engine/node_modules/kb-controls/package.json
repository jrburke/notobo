{
  "name": "kb-controls",
  "version": "0.0.2",
  "description": "present a polling interface for keyboard state given a binding object",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/kb-controls.git"
  },
  "keywords": [
    "keyboard",
    "controls",
    "polling",
    "event"
  ],
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "license": "MIT",
  "dependencies": {
    "vkey": "X.X.X",
    "ever": "X.X.X"
  },
  "devDependencies": {
    "raf": "0.0.1"
  },
  "readme": "# kb-controls\n\nexpose a polling object for (game) keybindings using [vkey](https://github.com/chrisdickinson/vkey/) definitions.\n\n```javascript\nvar kb = require('./index')\n  , raf = require('raf')\n\nvar ctl = kb({\n  '<left>': 'strafe_left'\n, '<right>': 'strafe_right'\n, '<up>': 'forward'\n, '<down>': 'backward'\n, 'W': 'forward'\n, 'A': 'strafe_left'\n, 'S': 'backward'\n, 'D': 'strafe_right'\n, '<mouse 1>': 'fire'\n})\n\nraf(document.body).on('data', function(dt) {\n  console.log(!!ctl.forward)\n})\n\n```\n\n### Why not events?\n\nEvents are great! I love them. But when you're writing game logic, oftentimes you want the frame event to drive the simulation -- and dealing with the keyboard as a separate evented interface can be troublesome in this regard.\n\n## API\n\n#### kb = require('raf')\n\nreturn the `kb` function.\n\n#### ctl = kb([DOMElement,] bindings[, augmentObject])\n\nAdd event listeners to `DOMElement` or `document.body` if not provided.\n\nBindings is a map of `vkey`'s to desired property names:\n\n```javascript\n// bindings example\n{ 'X': 'do_something'\n, '<space>': 'jump'\n, '<control>': 'sprint' }\n\n// would yield the following ctl object (sans methods):\n{ 'do_something': 0\n, 'jump': 0\n, 'sprint': 0 }\n```\n\nIf `augmentObject` is passed, these property names will be attached to it instead\nof a new object.\n\n#### ctl[yourPropertyName] -> Number\n\nIf the number is truthy, that means it's actively being pressed. Otherwise it's not. If it's\ngreater than 1, then two different keys may have been bound to the action and are simultaneously being pressed.\n\n#### ctl.enable()\n\nEnables the keyup, keydown, mouseup, and mousedown listeners (and makes them `preventDefault()`.)\n\n#### ctl.enabled() -> boolean\n\nReturns whether or not the `ctl` is enabled.\n\n#### ctl.disable()\n\nDisables the DOM listeners (without removing them). Keyboard and mouse events should work\nas normal while the `ctl` is disabled.\n\n#### ctl.destroy()\n\nRemoves all DOM event listeners and renders the `ctl` inert.\n\n## License\n\nMIT\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chrisdickinson/kb-controls/issues"
  },
  "_id": "kb-controls@0.0.2",
  "dist": {
    "shasum": "aaba555ea3548520c89125a61d92463632c124b7"
  },
  "_from": "kb-controls@0.0.2",
  "_resolved": "https://registry.npmjs.org/kb-controls/-/kb-controls-0.0.2.tgz"
}
