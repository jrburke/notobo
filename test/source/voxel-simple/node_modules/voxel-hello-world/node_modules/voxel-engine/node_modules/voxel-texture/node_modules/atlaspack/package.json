{
  "name": "atlaspack",
  "description": "Pack rectangles (or images) into a rectangle (or canvas texture atlas).",
  "version": "0.2.6",
  "homepage": "https://github.com/shama/atlaspack",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shama/atlaspack.git"
  },
  "bugs": {
    "url": "https://github.com/shama/atlaspack/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shama/atlaspack/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "start": "./node_modules/.bin/beefy example/example.js 8080 -- -d",
    "gh-pages": "browserify example/example.js -o example/example.js"
  },
  "devDependencies": {
    "painterly-textures": "0.0.3",
    "beefy": "~1.0.0",
    "browserify": "~3.28.0"
  },
  "keywords": [
    "voxel",
    "texture",
    "atlas",
    "geometry",
    "spritemap"
  ],
  "readme": "# atlaspack\n\nPack rectangles (or images) into a rectangle (or canvas texture atlas). View the\n[demo](http://shama.github.com/atlaspack/).\n\n## example\nThis will load 0-99 images and fit them onto a canvas texture atlas:\n\n```js\n// create a canvas\nvar canvas = document.createElement('canvas');\ndocument.body.appendChild(canvas);\ncanvas.width = 128;\ncanvas.height = 128;\n\n// Create a starting atlas based on the canvas\nvar atlas = require('atlaspack')(canvas);\n\nfor (var i = 0; i < 100; i++) {\n  var img = new Image();\n  img.id = i;\n  img.src = 'images/' + i + '.png';\n  img.onload = function() {\n    atlas.pack(img);\n  };\n}\n```\n\nYou can pack generic rectangles into an atlas as well. The following example\nwill create a 512x512 atlas and load random shapes into `document.body`\nevery second:\n\n```js\n// Specify a width and height of the starting atlas\nvar atlas = require('atlaspack')(512, 512);\n\n(function loop() {\n  var width  = Math.random() * 32;\n  var height = Math.random() * 32;\n\n  var node = atlas.pack({width: width, height: height});\n\n  var div = document.createElement('div');\n  div.style.position = 'absolute';\n  div.style.width  = width + 'px';\n  div.style.height = height + 'px';\n  div.style.left   = node.rect.x + 'px';\n  div.style.top    = node.rect.y + 'px';\n  document.body.appendChild(div);\n\n  setTimeout(loop, 1000);\n}());\n```\n\n## api\n\n### `atlaspack([...])`\nTakes either 1 `canvas` argument, 2 `width, height` arguments or 4\n`x, y, width, height` arguments. Returns an instance of `Atlas`.\n\n### `atlaspack.Atlas([...])`\nTakes either 1 `canvas` argument, 2 `width, height` arguments or 4\n`x, y, width, height` arguments.\n\n#### `atlas.pack(rect || image || object)`\nRecursively tries to pack `rect` (or `image`, `object`) into the atlas. Will\nreturn `false` if fails to fit the `rect` otherwise will return the atlas node\nthe `rect` has been packed into:\n\n```js\nvar Atlas = require('atlaspack').Atlas;\nvar Rect = require('atlaspack').Rect;\n\nvar atlas = new Atlas(128, 128), node;\n\nnode = atlas.pack(new Rect(0, 0, 32, 32));\nnode = atlas.pack({x: 0, y: 0, w: 32, h: 32});\n\nvar img = new Image();\nimg.src = 'myimage.png';\nimg.onload = function() {\n  node = atlas.pack(img);\n};\n```\n\n#### `atlas.expand(rect || img || object)`\nWill recursively expand the `atlas` to fit a new `rect` then pack the `rect`\ninto the expanded `atlas`. Returns the newly expanded `atlas`:\n\n```js\nvar atlas = require('atlaspack')(128, 128);\nvar dontfit = {x: 0, y: 0, w: 256, h: 256};\nvar node = atlas.pack(dontfit);\nif (node === false) {\n  atlas = atlas.expand(dontfit);\n}\n```\n\n#### `atlas.index()`\nReturns a flat array of `rect`s which have images within the atlas. Useful for\nretrieving an atlas key:\n\n```js\nvar atlas = require('atlaspack')(128, 128);\n\nfunction done() {\n  atlas.index().forEach(function(rect) {\n    console.log('Name: ' + rect.name);\n    console.log('Coords: ' + rect.x + ', ' + rect.y);\n  });\n}\n\nfor (var i = 0; i < 100; i++) {\n  var img = new Image();\n  img.src = 'images/' + i + '.png';\n\n  // Will use the id || name || src of the image as the rect.name\n  img.id = i;\n\n  img.onload = function() {\n    atlas.pack(img);\n    if (i === 99) done();\n  };\n}\n```\n\n#### `atlas.uv([width, height])`\nReturns an object with rect names as keys containing an array of UV mapping\ncoordinates between 0-1 with TRBL:\n\n```js\nvar uvmap = atlas.uv();\n/* {\n              TOP   RIGHT  BOTTOM  LEFT\n  'name':  [ [0,0], [1,0], [1,1], [0,1] ],\n} */\n```\n\nSpecify a `width` and `height` to override the dimensions the UVs will calculate\nfrom. Otherwise it will use the `atlas.rect` width and height.\n\n#### `atlas.json([input])`\nExports or imports a JSON key for the ability to save the atlas state and\nrestore it:\n\n```js\nvar jsonkey = atlas.json();\n// then later\natlas = atlas.json(jsonkey);\n\n// make sure to set your canvas if using a canvas too\natlas.canvas = mycanvas;\n```\n\n#### `atlas.tilepad`\nSet this boolean property to `true` if you would like each packed image to pad\nitself with a tiled pattern of itself. Useful for avoiding texture bleeding when\nmipmapping.\n\n### `atlaspack.Rect(x, y, w, h)`\nCreates a rectangle instance.\n\n#### `rect.fitsIn(rect)`\nReturns a `boolean` whether a `rect` fits within another `rect`.\n\n#### `rect.sameSizeAs(rect)`\nReturns a `boolean` whether a `rect` is the same size as another `rect`.\n\n## install\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install atlaspack\n```\n\n## release history\n* 0.2.6 - Fix _uvcache should be an object (@deathcap).\n* 0.2.5 - clearRect before placing image onto a canvas.\n* 0.2.4 - Add width/height overrides to uv method.\n* 0.2.3 - Add tilepad property to help with mipmapping.\n* 0.2.2 - Ability to get and set JSON key.\n* 0.2.1 - Add uv method for uv coordinates.\n* 0.2.0 - Add expand and index methods.\n* 0.1.0 - initial release\n\n## license\nCopyright (c) 2014 Kyle Robinson Young  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "atlaspack@0.2.6",
  "dist": {
    "shasum": "8432f3aa11b153a5529cbdee27d98b04b683069b"
  },
  "_from": "atlaspack@~0.2.4",
  "_resolved": "https://registry.npmjs.org/atlaspack/-/atlaspack-0.2.6.tgz"
}
