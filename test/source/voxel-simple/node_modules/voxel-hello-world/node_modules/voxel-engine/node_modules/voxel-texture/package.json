{
  "name": "voxel-texture",
  "description": "A texture helper for voxeljs",
  "version": "0.5.6",
  "homepage": "https://github.com/shama/voxel-texture",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shama/voxel-texture.git"
  },
  "bugs": {
    "url": "https://github.com/shama/voxel-texture/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shama/voxel-texture/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "start": "cd example && ../node_modules/.bin/browservefy world.js 8080 -- -d",
    "gh-pages": "cp -R ./example/* ./ && browserify world.js -o world.js"
  },
  "dependencies": {
    "tic": "~0.2.0",
    "atlaspack": "~0.2.4"
  },
  "devDependencies": {
    "voxel-engine": "~0.17.1",
    "voxel-debris": "~0.0.4",
    "browservefy": "0.0.10",
    "voxel-player": "~0.1.0"
  },
  "keywords": [
    "voxel",
    "texture"
  ],
  "readme": "# voxel-texture\n\n> Add textures to an atlas and set UV mapping on geometries. Used for texturing\n> in [voxel.js](http://voxeljs.com).\n\nView [the demo](http://shama.github.com/voxel-texture).\n\n**ATTENTION! v0.5.0 has changed dramatically. This library is no longer is\nmaterials API but just loads textures onto an atlas and sets UV mappings.**\n\n## example\n\n```js\n// create a material engine\nvar textureEngine = require('voxel-texture')({\n  // a copy of your voxel.js game\n  game: game,\n\n  // path to your textures\n  texturePath: 'textures/'\n});\n\n// load textures and it returns textures just loaded\ntextureEngine.load(['grass', 'dirt', 'grass_dirt'], function(textures) {\n  // create a new mesh\n  var cube = new game.THREE.Mesh(\n    new game.THREE.CubeGeometry(game.cubeSize, game.cubeSize, game.cubeSize),\n    // use the texture engine atlas material\n    textureEngine.material\n  );\n  // paint the cube with grass on top, dirt on bottom and grass_dirt on sides\n  textureEngine.paint(cube, ['grass', 'dirt', 'grass_dirt']);\n});\n```\n\n## api\n\n### `require('voxel-texture')(options)`\nReturns a new texture engine instance. Must pass a copy of your voxel.js\n`game`. `options` defaults to:\n\n```js\n{\n  texturePath: '/textures/',\n  materialParams: { ambient: 0xbbbbbb },\n  materialType: THREE.MeshLambertMaterial,\n  applyTextureParams: function(map) {\n    map.magFilter = this.THREE.NearestFilter;\n    map.minFilter = this.THREE.LinearMipMapLinearFilter;\n  }\n}\n```\n\n### `textureEngine.load(textures, callback)`\nLoads textures onto the atlas by expanding the texture names:\n\n```js\ntextureEngine.load('grass', function(textures) {\n  // textures = [grass, grass, grass, grass, grass, grass]\n});\n```\n\n```js\ntextureEngine.load(['grass', 'dirt', 'grass_dirt'], function(textures) {\n  // textures = [grass_dirt, grass_dirt, grass, dirt, grass_dirt, grass_dirt]\n});\n```\n\n```js\ntextureEngine.load([\n  'obsidian',\n  ['back', 'front', 'top', 'bottom', 'left', 'right'],\n  'brick'\n], function(textures) {\n  /*\n  textures = [\n    obsidian, obsidian, obsidian, obsidian, obsidian, obsidian,\n    back, front, top, bottom, left, right,\n    brick, brick, brick, brick, brick, brick\n  ]\n  */\n});\n```\n\n### `textureEngine.find(name)`\nFinds the type of block by texture name:\n\n```js\n// Find and change the center block to grass\ngame.setBlock([0, 0, 0], textureEngine.find('grass'));\n```\n\nAlthough this is built into the voxel engine so you could just do:\n\n```js\ngame.setBlock([0, 0, 0], 'grass');\n```\n\n### `textureEngine.paint(mesh, textures)`\nModifies the UV mapping of given `mesh` to the `textures` names supplied:\n\n```js\n// create a custom mesh and load all materials\nvar mesh = new game.THREE.Mesh(\n  new game.THREE.Geometry(),\n  textureEngine.material\n);\n\n// paint the geometry\ntextureEngine.paint(mesh, ['grass', 'dirt', 'grass_dirt']);\n```\n\nOr if you have the `face.color` set on the faces of your geometry (such as how\nvoxel-mesh does it) then omit the `textures` argument. It will select the\ntexture based on color from all the previously loaded textures:\n\n```js\ntextureEngine.paint(voxelMesh);\n```\n\n### `textureEngine.sprite(name, w, h, callback)`\nCreate textures from a sprite map. If you have a single image with a bunch of\ntextures do:\n\n```js\n// load terrain.png, it is 512x512\n// each texture is 32x32\ntextureEngine.sprite('terrain', 32, function(textures) {\n  // each texture will be named: terrain_x_y\n});\n```\n\nThe width and height default to `16x16`.\n\n### `textureEngine.animate(mesh, textures, delay)`\nCreate an animated material. A material that after each delay will paint the\nmesh by iterating through `textures`. Must run `textureEngine.tick()` to\nactually animate.\n\n```js\nvar mesh = new game.THREE.Mesh(\n  new game.THREE.Geometry(),\n  new game.THREE.MeshFaceMaterial()\n);\nmesh.material = textureEngine.animate(mesh, ['one', 'two', 'three'], 1000);\n```\n\n### `textureEngine.tick(delta)`\nRun the animations for any animated materials.\n\n```js\ngame.on('tick', function(dt) {\n  textureEngine.tick(dt);\n});\n```\n\n## install\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install voxel-texture\n```\n\n## release history\n* 0.5.6 - Add materialFlatColor option for using simple flat colors instead of textures.\n* 0.5.5 - Only call document.createElement if available.\n* 0.5.4 - Allow null placeholder materials.\n* 0.5.3 - Force texture to dimensions that are power of 2 for mipmaps.\n* 0.5.2 - Use atlaspack tilepad to avoid mipmap texture bleed.\n* 0.5.1 - Fix CORS support.\n* 0.5.0 - No longer a materials API. Loads textures onto an atlas and sets UV mappings.\n* 0.4.0 - Add findIndex for finding block type index.\n* 0.3.3 - Move three to peerDependencies. thanks @niftylettuce!\n* 0.3.2 - Use face.color instead of face.vertexColors[0]\n* 0.3.1 - Support for animated materials.\n* 0.3.0 - refactored entire module. removed rotate. added load, get, paint, sprite methods. auto detect transparent.\n* 0.2.2 - ability to set material type and params. thanks @hughsk!\n* 0.2.1 - fix rotation of front and left textures when loading mesh\n* 0.2.0 - ability to set multiple textures on voxel meshes\n* 0.1.1 - fix texture sharpness\n* 0.1.0 - initial release\n\n## license\nCopyright (c) 2013 Kyle Robinson Young  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "voxel-texture@0.5.6",
  "dist": {
    "shasum": "2a4a9c0d8bf614ec4084363600ad42d04a17c60f"
  },
  "_from": "voxel-texture@0.5.6",
  "_resolved": "https://registry.npmjs.org/voxel-texture/-/voxel-texture-0.5.6.tgz"
}
